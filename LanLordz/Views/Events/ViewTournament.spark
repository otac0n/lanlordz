<viewdata model="LanLordz.Models.TournamentDetailsModel"/>
<content name="title">${Model.Tournament.Title} | View Tournament</content>
<content name="headers">
  <!--[if IE]>
  <script type="text/javascript" src="<%= Response.ApplyAppPathModifier("~/Scripts/svgcheck.js") %>"></script>
  <script type="text/vbscript" src="<%= Response.ApplyAppPathModifier("~/Scripts/svgcheck.vbs") %>"></script>
  <![endif]-->
</content>
<content name="main">
    <div class="EventsNavigator">!{Html.ActionLink(Controller.Config.SiteName + " Events", "Index")} &gt; !{Html.ActionLink(Model.Event.Title, "Details", new { id = Model.Event.EventID })} &gt; ${Model.Tournament.Title}</div>
    <h2>${Model.Tournament.Title}</h2>
    <dl>
     <dt>Team Size:</dt><dd>${Model.Tournament.TeamSize}</dd>
     <dt>Game:</dt><dd>${Model.Tournament.Game}</dd>
     <dt>Type:</dt><dd>${Model.Tournament.PairingsGenerator}</dd>
     <if condition="!string.IsNullOrEmpty(Model.Tournament.GameInfo)">
     <dt>Game Info:</dt><dd>!{FormatPostText(Model.Tournament.GameInfo)}</dd>
     </if>
     <if condition="!string.IsNullOrEmpty(Model.Tournament.ServerSettings)">
     <dt>Server Settings:</dt><dd>!{FormatPostText(Model.Tournament.ServerSettings)}</dd>
     </if>
    </dl>
    <div if="Model.UserAccess.CanCreateTeam || Model.UserAccess.CanDisbandTeam || Model.UserAccess.CanInputScores || Model.UserAccess.CanJoinTeam || Model.UserAccess.CanLeaveTeam || Model.UserAccess.CanManageTeam || Model.UserAccess.CanRollBackRound || Model.UserAccess.CanStartNextRound || Model.UserAccess.CanLockTeams || Model.UserAccess.CanUnlockTeams || Model.UserAccess.CanEditTeams" class="TournamentTools">
     <div if="Model.UserAccess.CanCreateTeam" class="TournamentToolsCreateTeam">!{Html.ActionLink(!(Model.Tournament.TeamSize == 1) ? "Create a Team" : "Join Tournament", "CreateTeam", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanJoinTeam" class="TournamentToolsJoinTeam">!{Html.ActionLink("Join a Team", "JoinTeam", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanLeaveTeam || Model.UserAccess.CanDisbandTeam" class="TournamentToolsLeaveTeam">!{Html.ActionLink(!(Model.Tournament.TeamSize == 1) ? "Leave your Team" : "Leave Tournament", "LeaveTeam", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanManageTeam" class="TournamentToolsManageTeam">!{Html.ActionLink("Manage your Team", "ManageTeam", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanLockTeams" class="TournamentToolsLockTeams">!{Html.ActionLink("Lock Teams", "LockTeams", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanUnlockTeams" class="TournamentToolsUnlockTeams">!{Html.ActionLink("Unlock Teams", "UnlockTeams", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanEditTeams" class="TournamentToolsEditTeams">!{Html.ActionLink("Edit Teams", "EditTeams", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanInputScores" class="TournamentToolsInputScores">!{Html.ActionLink("Input Scores", "InputScores", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanStartNextRound" class="TournamentToolsStartNextRound">!{Html.ActionLink(Model.Rounds.Any() ? "Start Next Round" : "Start Tournament", "StartNextRound", new { id = Model.Tournament.TournamentID })}</div>
     <div if="Model.UserAccess.CanRollBackRound" class="TournamentToolsRollBackRound">!{Html.ActionLink("Roll-back Tournament", "RollBackRound", new { id = Model.Tournament.TournamentID })}</div>
    </div>
    <div class="EventTournamentTeamsList">
     <div class="EventTournamentTeamsListTitle">${Model.Tournament.TeamSize > 1 ? "Teams" : "Participants"}</div>
     <div if="!Model.Teams.Any()" class="EventTournamentTeamsNotAvailable">No ${Model.Tournament.TeamSize > 1 ? "teams" : "participants"} yet registered.</div>
     <div each="var Team in Model.Teams" class="EventTournamentTeam">
      <div class="EventTournamentTeamName">${Team.TeamName}</div>
      <if condition="Model.Tournament.TeamSize > 1">
      <div class="EventTournamentTeamMembers">
       <div each="var User in Team.UsersTeams.OrderByDescending(u => u.IsTeamCaptain)" class="EventTournamentTeamMemberName EventTournamentTeamMemberTeamCaptain?{User.IsTeamCaptain}">!{UserLink(User.User.UserID, User.User.Username, string.Format(Team.TeamTagFormat, User.User.Username))}</div>
      </div>
      </if>
     </div>
    </div>
    <div class="EventTournamentStandings">
     <div class="EventTournamentStandingsTitle">${Model.TournamentFinished ? "Final" : "Current"} Standings</div>
     <if condition="Model.Standings == null || !Model.Standings.Any()">
     <div class="EventTournamentStandingsNotAvailable">Standings are not ${Model.TournamentFinished ? "yet" : "currently"} available.</div>
     </if>
     <else>
     <table class="EventTournamentStandingsTable">
      <tr class="EventTournamentStandingsTableHeader">
       <th class="EventTournamentStandingsTableHeaderRank">Rank</th>
       <th class="EventTournamentStandingsTableHeaderTeam">Team</th>
       <th class="EventTournamentStandingsTableHeaderDetails">Details</th>
      </tr>
      <tr each="var Standing in Model.Standings" class="EventTournamentStandingsTableStanding">
       <td class="EventTournamentStandingsTableStandingRank">${Standing.Rank}</td>
       <td class="EventTournamentStandingsTableStandingTeam">${Standing.Team.TeamName}</td>
       <td class="EventTournamentStandingsTableStandingDetails">${Standing.Details}</td>
      </tr>
     </table>
     </else>
    </div>
    <div class="EventTournamentRoundsList">
     <div class="EventTournamentRoundsListTitle">Rounds</div>
     <if condition="!Model.Rounds.Any()">
     <div class="EventTournamentRoundsNotAvailable">The tournament has not yet started.</div>
     </if>
     <else>
     <div if="Model.CanRenderView" class="EventTournamentRoundsListVisualization">
      <!--[if IE]>
      <script language="JavaScript">
       //<![CDATA[
        checkAndGetSVGViewer();
       //]]>
      </script>
      <embed src="!{Url.Action("RenderTournament", new { id = Model.Tournament.TournamentID })}" type="image/svg+xml"
        width="${Model.RenderedSize.Value.Width}" height="${Model.RenderedSize.Value.Height}"
        wmode="transparent"
        pluginspage="http://www.adobe.com/svg/viewer/install/" />
      <![endif]-->
      <![if !IE]>
      <object data="!{Url.Action("RenderTournament", new { id = Model.Tournament.TournamentID })}" type="image/svg+xml"
        width="${Model.RenderedSize.Value.Width}" height="${Model.RenderedSize.Value.Height}">
      </object>
      <![endif]>
     </div>
     <div each="var Round in Model.Rounds.OrderBy(r => r.RoundNumber)" class="EventTournamentRound">
      <div class="EventTournamentRoundTitle">${"Round " + Round.RoundNumber}</div>
      <div class="EventTournamentRoundPairingsList">
       <div each="var Pairing in Round.Pairings" class="EventTournamentRoundPairing">
        <table class="EventTournamentRoundPairingTeamsList">
         <tr each="var TeamPairing in Pairing.TeamsPairings.OrderByDescending(tp => tp.Score)" class="EventTournamentRoundPairingTeam">
          <td class="EventTournamentRoundPairingTeamName">${TeamPairing.Team.TeamName}</td>
          <td class="EventTournamentRoundPairingTeamScore">${Pairing.TeamsPairings.Count() == 1 ? "Bye" : (string.IsNullOrEmpty(TeamPairing.Score) ? "?" : TeamPairing.Score)}</td>
         </tr>
        </table>
       </div>
      </div>
     </div>
     </else>
    </div>
</content>
