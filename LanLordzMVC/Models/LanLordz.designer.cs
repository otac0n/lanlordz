#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LanLordz.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="lanlordz_web")]
	public partial class LanLordzDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConfiguration(Configuration instance);
    partial void UpdateConfiguration(Configuration instance);
    partial void DeleteConfiguration(Configuration instance);
    partial void InsertUsersRole(UsersRole instance);
    partial void UpdateUsersRole(UsersRole instance);
    partial void DeleteUsersRole(UsersRole instance);
    partial void InsertEmailConfirm(EmailConfirm instance);
    partial void UpdateEmailConfirm(EmailConfirm instance);
    partial void DeleteEmailConfirm(EmailConfirm instance);
    partial void InsertSponsor(Sponsor instance);
    partial void UpdateSponsor(Sponsor instance);
    partial void DeleteSponsor(Sponsor instance);
    partial void InsertTitle(Title instance);
    partial void UpdateTitle(Title instance);
    partial void DeleteTitle(Title instance);
    partial void InsertUserAttribute(UserAttribute instance);
    partial void UpdateUserAttribute(UserAttribute instance);
    partial void DeleteUserAttribute(UserAttribute instance);
    partial void InsertUserAvatar(UserAvatar instance);
    partial void UpdateUserAvatar(UserAvatar instance);
    partial void DeleteUserAvatar(UserAvatar instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertEventImage(EventImage instance);
    partial void UpdateEventImage(EventImage instance);
    partial void DeleteEventImage(EventImage instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertPairing(Pairing instance);
    partial void UpdatePairing(Pairing instance);
    partial void DeletePairing(Pairing instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertRound(Round instance);
    partial void UpdateRound(Round instance);
    partial void DeleteRound(Round instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamsPairing(TeamsPairing instance);
    partial void UpdateTeamsPairing(TeamsPairing instance);
    partial void DeleteTeamsPairing(TeamsPairing instance);
    partial void InsertTournament(Tournament instance);
    partial void UpdateTournament(Tournament instance);
    partial void DeleteTournament(Tournament instance);
    partial void InsertUsersTeam(UsersTeam instance);
    partial void UpdateUsersTeam(UsersTeam instance);
    partial void DeleteUsersTeam(UsersTeam instance);
    partial void InsertVenue(Venue instance);
    partial void UpdateVenue(Venue instance);
    partial void DeleteVenue(Venue instance);
    partial void InsertForumGroup(ForumGroup instance);
    partial void UpdateForumGroup(ForumGroup instance);
    partial void DeleteForumGroup(ForumGroup instance);
    partial void InsertForumGroupsAccess(ForumGroupsAccess instance);
    partial void UpdateForumGroupsAccess(ForumGroupsAccess instance);
    partial void DeleteForumGroupsAccess(ForumGroupsAccess instance);
    partial void InsertForum(Forum instance);
    partial void UpdateForum(Forum instance);
    partial void DeleteForum(Forum instance);
    partial void InsertForumsAccess(ForumsAccess instance);
    partial void UpdateForumsAccess(ForumsAccess instance);
    partial void DeleteForumsAccess(ForumsAccess instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertThreadLevel(ThreadLevel instance);
    partial void UpdateThreadLevel(ThreadLevel instance);
    partial void DeleteThreadLevel(ThreadLevel instance);
    partial void InsertThreadRead(ThreadRead instance);
    partial void UpdateThreadRead(ThreadRead instance);
    partial void DeleteThreadRead(ThreadRead instance);
    partial void InsertThread(Thread instance);
    partial void UpdateThread(Thread instance);
    partial void DeleteThread(Thread instance);
    partial void InsertAccessControlItem(AccessControlItem instance);
    partial void UpdateAccessControlItem(AccessControlItem instance);
    partial void DeleteAccessControlItem(AccessControlItem instance);
    partial void InsertAccessControlList(AccessControlList instance);
    partial void UpdateAccessControlList(AccessControlList instance);
    partial void DeleteAccessControlList(AccessControlList instance);
    partial void InsertAuthFailure(AuthFailure instance);
    partial void UpdateAuthFailure(AuthFailure instance);
    partial void DeleteAuthFailure(AuthFailure instance);
    partial void InsertAutoLogin(AutoLogin instance);
    partial void UpdateAutoLogin(AutoLogin instance);
    partial void DeleteAutoLogin(AutoLogin instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSecurityKey(SecurityKey instance);
    partial void UpdateSecurityKey(SecurityKey instance);
    partial void DeleteSecurityKey(SecurityKey instance);
    partial void InsertPrize(Prize instance);
    partial void UpdatePrize(Prize instance);
    partial void DeletePrize(Prize instance);
    partial void InsertPoll(Poll instance);
    partial void UpdatePoll(Poll instance);
    partial void DeletePoll(Poll instance);
    partial void InsertPollResponse(PollResponse instance);
    partial void UpdatePollResponse(PollResponse instance);
    partial void DeletePollResponse(PollResponse instance);
    partial void InsertUsersPollResponse(UsersPollResponse instance);
    partial void UpdateUsersPollResponse(UsersPollResponse instance);
    partial void DeleteUsersPollResponse(UsersPollResponse instance);
    partial void InsertEventImageUserTag(EventImageUserTag instance);
    partial void UpdateEventImageUserTag(EventImageUserTag instance);
    partial void DeleteEventImageUserTag(EventImageUserTag instance);
    #endregion
		
		public LanLordzDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["lanlordz_webConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LanLordzDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LanLordzDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LanLordzDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LanLordzDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Configuration> Configurations
		{
			get
			{
				return this.GetTable<Configuration>();
			}
		}
		
		public System.Data.Linq.Table<UsersRole> UsersRoles
		{
			get
			{
				return this.GetTable<UsersRole>();
			}
		}
		
		public System.Data.Linq.Table<EmailConfirm> EmailConfirms
		{
			get
			{
				return this.GetTable<EmailConfirm>();
			}
		}
		
		public System.Data.Linq.Table<Sponsor> Sponsors
		{
			get
			{
				return this.GetTable<Sponsor>();
			}
		}
		
		public System.Data.Linq.Table<Title> Titles
		{
			get
			{
				return this.GetTable<Title>();
			}
		}
		
		public System.Data.Linq.Table<UserAttribute> UserAttributes
		{
			get
			{
				return this.GetTable<UserAttribute>();
			}
		}
		
		public System.Data.Linq.Table<UserAvatar> UserAvatars
		{
			get
			{
				return this.GetTable<UserAvatar>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<EventImage> EventImages
		{
			get
			{
				return this.GetTable<EventImage>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Pairing> Pairings
		{
			get
			{
				return this.GetTable<Pairing>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Round> Rounds
		{
			get
			{
				return this.GetTable<Round>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamsPairing> TeamsPairings
		{
			get
			{
				return this.GetTable<TeamsPairing>();
			}
		}
		
		public System.Data.Linq.Table<Tournament> Tournaments
		{
			get
			{
				return this.GetTable<Tournament>();
			}
		}
		
		public System.Data.Linq.Table<UsersTeam> UsersTeams
		{
			get
			{
				return this.GetTable<UsersTeam>();
			}
		}
		
		public System.Data.Linq.Table<Venue> Venues
		{
			get
			{
				return this.GetTable<Venue>();
			}
		}
		
		public System.Data.Linq.Table<ForumGroup> ForumGroups
		{
			get
			{
				return this.GetTable<ForumGroup>();
			}
		}
		
		public System.Data.Linq.Table<ForumGroupsAccess> ForumGroupsAccesses
		{
			get
			{
				return this.GetTable<ForumGroupsAccess>();
			}
		}
		
		public System.Data.Linq.Table<Forum> Forums
		{
			get
			{
				return this.GetTable<Forum>();
			}
		}
		
		public System.Data.Linq.Table<ForumsAccess> ForumsAccesses
		{
			get
			{
				return this.GetTable<ForumsAccess>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<ThreadLevel> ThreadLevels
		{
			get
			{
				return this.GetTable<ThreadLevel>();
			}
		}
		
		public System.Data.Linq.Table<ThreadRead> ThreadReads
		{
			get
			{
				return this.GetTable<ThreadRead>();
			}
		}
		
		public System.Data.Linq.Table<Thread> Threads
		{
			get
			{
				return this.GetTable<Thread>();
			}
		}
		
		public System.Data.Linq.Table<AccessControlItem> AccessControlItems
		{
			get
			{
				return this.GetTable<AccessControlItem>();
			}
		}
		
		public System.Data.Linq.Table<AccessControlList> AccessControlLists
		{
			get
			{
				return this.GetTable<AccessControlList>();
			}
		}
		
		public System.Data.Linq.Table<AuthFailure> AuthFailures
		{
			get
			{
				return this.GetTable<AuthFailure>();
			}
		}
		
		public System.Data.Linq.Table<AutoLogin> AutoLogins
		{
			get
			{
				return this.GetTable<AutoLogin>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SecurityKey> SecurityKeys
		{
			get
			{
				return this.GetTable<SecurityKey>();
			}
		}
		
		public System.Data.Linq.Table<Prize> Prizes
		{
			get
			{
				return this.GetTable<Prize>();
			}
		}
		
		public System.Data.Linq.Table<Poll> Polls
		{
			get
			{
				return this.GetTable<Poll>();
			}
		}
		
		public System.Data.Linq.Table<PollResponse> PollResponses
		{
			get
			{
				return this.GetTable<PollResponse>();
			}
		}
		
		public System.Data.Linq.Table<UsersPollResponse> UsersPollResponses
		{
			get
			{
				return this.GetTable<UsersPollResponse>();
			}
		}
		
		public System.Data.Linq.Table<EventImageUserTag> EventImageUserTags
		{
			get
			{
				return this.GetTable<EventImageUserTag>();
			}
		}
	}
	
	[Table(Name="dbo.Configuration")]
	public partial class Configuration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Property;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyChanging(string value);
    partial void OnPropertyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Configuration()
		{
			OnCreated();
		}
		
		[Column(Storage="_Property", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Property
		{
			get
			{
				return this._Property;
			}
			set
			{
				if ((this._Property != value))
				{
					this.OnPropertyChanging(value);
					this.SendPropertyChanging();
					this._Property = value;
					this.SendPropertyChanged("Property");
					this.OnPropertyChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="security.UsersRoles")]
	public partial class UsersRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserRoleID;
		
		private long _UserID;
		
		private long _RoleID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(long value);
    partial void OnUserRoleIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(long value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UsersRole()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_UserRoleID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="BigInt NOT NULL")]
		public long RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Association(Name="User_UsersRole", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Role_UsersRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(long);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EmailConfirm")]
	public partial class EmailConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private System.Guid _Key;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnKeyChanging(System.Guid value);
    partial void OnKeyChanged();
    #endregion
		
		public EmailConfirm()
		{
			OnCreated();
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sponsors")]
	public partial class Sponsor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SponsorID;
		
		private string _Name;
		
		private string _Info;
		
		private string _Url;
		
		private string _ImageUrl;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSponsorIDChanging(long value);
    partial void OnSponsorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public Sponsor()
		{
			OnCreated();
		}
		
		[Column(Storage="_SponsorID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SponsorID
		{
			get
			{
				return this._SponsorID;
			}
			set
			{
				if ((this._SponsorID != value))
				{
					this.OnSponsorIDChanging(value);
					this.SendPropertyChanging();
					this._SponsorID = value;
					this.SendPropertyChanged("SponsorID");
					this.OnSponsorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(MAX)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="NVarChar(MAX)")]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Titles")]
	public partial class Title : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TitleID;
		
		private System.Nullable<long> _UserID;
		
		private System.Nullable<long> _RoleID;
		
		private System.Nullable<int> _PostCountThreshold;
		
		private string _TitleText;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleIDChanging(long value);
    partial void OnTitleIDChanged();
    partial void OnUserIDChanging(System.Nullable<long> value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(System.Nullable<long> value);
    partial void OnRoleIDChanged();
    partial void OnPostCountThresholdChanging(System.Nullable<int> value);
    partial void OnPostCountThresholdChanged();
    partial void OnTitleTextChanging(string value);
    partial void OnTitleTextChanged();
    #endregion
		
		public Title()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_TitleID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt")]
		public System.Nullable<long> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="BigInt")]
		public System.Nullable<long> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_PostCountThreshold", DbType="Int")]
		public System.Nullable<int> PostCountThreshold
		{
			get
			{
				return this._PostCountThreshold;
			}
			set
			{
				if ((this._PostCountThreshold != value))
				{
					this.OnPostCountThresholdChanging(value);
					this.SendPropertyChanging();
					this._PostCountThreshold = value;
					this.SendPropertyChanged("PostCountThreshold");
					this.OnPostCountThresholdChanged();
				}
			}
		}
		
		[Column(Storage="_TitleText", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TitleText
		{
			get
			{
				return this._TitleText;
			}
			set
			{
				if ((this._TitleText != value))
				{
					this.OnTitleTextChanging(value);
					this.SendPropertyChanging();
					this._TitleText = value;
					this.SendPropertyChanged("TitleText");
					this.OnTitleTextChanged();
				}
			}
		}
		
		[Association(Name="User_Title", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Titles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Titles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Role_Title", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Titles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Titles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserAttributes")]
	public partial class UserAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserAttributeID;
		
		private long _UserID;
		
		private string _Attribute;
		
		private string _Value;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAttributeIDChanging(long value);
    partial void OnUserAttributeIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnAttributeChanging(string value);
    partial void OnAttributeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public UserAttribute()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserAttributeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserAttributeID
		{
			get
			{
				return this._UserAttributeID;
			}
			set
			{
				if ((this._UserAttributeID != value))
				{
					this.OnUserAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._UserAttributeID = value;
					this.SendPropertyChanged("UserAttributeID");
					this.OnUserAttributeIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Attribute", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Attribute
		{
			get
			{
				return this._Attribute;
			}
			set
			{
				if ((this._Attribute != value))
				{
					this.OnAttributeChanging(value);
					this.SendPropertyChanging();
					this._Attribute = value;
					this.SendPropertyChanged("Attribute");
					this.OnAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="User_UserAttribute", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserAttributes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserAttributes.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserAvatars")]
	public partial class UserAvatar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private System.Data.Linq.Binary _Avatar;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    #endregion
		
		public UserAvatar()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Avatar", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[Association(Name="User_UserAvatar", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserAvatar = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserAvatar = this;
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private string _Username;
		
		private string _PasswordHash;
		
		private string _SecurityQuestion;
		
		private string _SecurityAnswer;
		
		private System.DateTime _CreateDate;
		
		private string _Email;
		
		private bool _ShowEmail;
		
		private bool _ReceiveAdminEmail;
		
		private char _Gender;
		
		private bool _ShowGender;
		
		private bool _IsEmailConfirmed;
		
		private EntitySet<UsersRole> _UsersRoles;
		
		private EntitySet<Title> _Titles;
		
		private EntitySet<UserAttribute> _UserAttributes;
		
		private EntityRef<UserAvatar> _UserAvatar;
		
		private EntitySet<Registration> _Registrations;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntitySet<UsersTeam> _UsersTeams;
		
		private EntitySet<Post> _ModifiedPosts;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<ThreadRead> _ThreadReads;
		
		private EntitySet<AuthFailure> _AuthFailures;
		
		private EntitySet<AutoLogin> _AutoLogins;
		
		private EntityRef<SecurityKey> _SecurityKey;
		
		private EntitySet<Prize> _Prizes;
		
		private EntitySet<Poll> _Polls;
		
		private EntitySet<UsersPollResponse> _UsersPollResponses;
		
		private EntitySet<EventImageUserTag> _ImageTagsOf;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityQuestionChanging(string value);
    partial void OnSecurityQuestionChanged();
    partial void OnSecurityAnswerChanging(string value);
    partial void OnSecurityAnswerChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnShowEmailChanging(bool value);
    partial void OnShowEmailChanged();
    partial void OnReceiveAdminEmailChanging(bool value);
    partial void OnReceiveAdminEmailChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnShowGenderChanging(bool value);
    partial void OnShowGenderChanged();
    partial void OnIsEmailConfirmedChanging(bool value);
    partial void OnIsEmailConfirmedChanged();
    #endregion
		
		public User()
		{
			this._UsersRoles = new EntitySet<UsersRole>(new Action<UsersRole>(this.attach_UsersRoles), new Action<UsersRole>(this.detach_UsersRoles));
			this._Titles = new EntitySet<Title>(new Action<Title>(this.attach_Titles), new Action<Title>(this.detach_Titles));
			this._UserAttributes = new EntitySet<UserAttribute>(new Action<UserAttribute>(this.attach_UserAttributes), new Action<UserAttribute>(this.detach_UserAttributes));
			this._UserAvatar = default(EntityRef<UserAvatar>);
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._UsersTeams = new EntitySet<UsersTeam>(new Action<UsersTeam>(this.attach_UsersTeams), new Action<UsersTeam>(this.detach_UsersTeams));
			this._ModifiedPosts = new EntitySet<Post>(new Action<Post>(this.attach_ModifiedPosts), new Action<Post>(this.detach_ModifiedPosts));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._ThreadReads = new EntitySet<ThreadRead>(new Action<ThreadRead>(this.attach_ThreadReads), new Action<ThreadRead>(this.detach_ThreadReads));
			this._AuthFailures = new EntitySet<AuthFailure>(new Action<AuthFailure>(this.attach_AuthFailures), new Action<AuthFailure>(this.detach_AuthFailures));
			this._AutoLogins = new EntitySet<AutoLogin>(new Action<AutoLogin>(this.attach_AutoLogins), new Action<AutoLogin>(this.detach_AutoLogins));
			this._SecurityKey = default(EntityRef<SecurityKey>);
			this._Prizes = new EntitySet<Prize>(new Action<Prize>(this.attach_Prizes), new Action<Prize>(this.detach_Prizes));
			this._Polls = new EntitySet<Poll>(new Action<Poll>(this.attach_Polls), new Action<Poll>(this.detach_Polls));
			this._UsersPollResponses = new EntitySet<UsersPollResponse>(new Action<UsersPollResponse>(this.attach_UsersPollResponses), new Action<UsersPollResponse>(this.detach_UsersPollResponses));
			this._ImageTagsOf = new EntitySet<EventImageUserTag>(new Action<EventImageUserTag>(this.attach_ImageTagsOf), new Action<EventImageUserTag>(this.detach_ImageTagsOf));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="Char(88) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityQuestion", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SecurityQuestion
		{
			get
			{
				return this._SecurityQuestion;
			}
			set
			{
				if ((this._SecurityQuestion != value))
				{
					this.OnSecurityQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecurityQuestion = value;
					this.SendPropertyChanged("SecurityQuestion");
					this.OnSecurityQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityAnswer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SecurityAnswer
		{
			get
			{
				return this._SecurityAnswer;
			}
			set
			{
				if ((this._SecurityAnswer != value))
				{
					this.OnSecurityAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecurityAnswer = value;
					this.SendPropertyChanged("SecurityAnswer");
					this.OnSecurityAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ShowEmail", DbType="Bit NOT NULL")]
		public bool ShowEmail
		{
			get
			{
				return this._ShowEmail;
			}
			set
			{
				if ((this._ShowEmail != value))
				{
					this.OnShowEmailChanging(value);
					this.SendPropertyChanging();
					this._ShowEmail = value;
					this.SendPropertyChanged("ShowEmail");
					this.OnShowEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiveAdminEmail", DbType="Bit NOT NULL")]
		public bool ReceiveAdminEmail
		{
			get
			{
				return this._ReceiveAdminEmail;
			}
			set
			{
				if ((this._ReceiveAdminEmail != value))
				{
					this.OnReceiveAdminEmailChanging(value);
					this.SendPropertyChanging();
					this._ReceiveAdminEmail = value;
					this.SendPropertyChanged("ReceiveAdminEmail");
					this.OnReceiveAdminEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Char(1) NOT NULL")]
		public char Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_ShowGender", DbType="Bit NOT NULL")]
		public bool ShowGender
		{
			get
			{
				return this._ShowGender;
			}
			set
			{
				if ((this._ShowGender != value))
				{
					this.OnShowGenderChanging(value);
					this.SendPropertyChanging();
					this._ShowGender = value;
					this.SendPropertyChanged("ShowGender");
					this.OnShowGenderChanged();
				}
			}
		}
		
		[Column(Storage="_IsEmailConfirmed", DbType="Bit NOT NULL")]
		public bool IsEmailConfirmed
		{
			get
			{
				return this._IsEmailConfirmed;
			}
			set
			{
				if ((this._IsEmailConfirmed != value))
				{
					this.OnIsEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsEmailConfirmed = value;
					this.SendPropertyChanged("IsEmailConfirmed");
					this.OnIsEmailConfirmedChanged();
				}
			}
		}
		
		[Association(Name="User_UsersRole", Storage="_UsersRoles", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UsersRole> UsersRoles
		{
			get
			{
				return this._UsersRoles;
			}
			set
			{
				this._UsersRoles.Assign(value);
			}
		}
		
		[Association(Name="User_Title", Storage="_Titles", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Title> Titles
		{
			get
			{
				return this._Titles;
			}
			set
			{
				this._Titles.Assign(value);
			}
		}
		
		[Association(Name="User_UserAttribute", Storage="_UserAttributes", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserAttribute> UserAttributes
		{
			get
			{
				return this._UserAttributes;
			}
			set
			{
				this._UserAttributes.Assign(value);
			}
		}
		
		[Association(Name="User_UserAvatar", Storage="_UserAvatar", ThisKey="UserID", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
		public UserAvatar UserAvatar
		{
			get
			{
				return this._UserAvatar.Entity;
			}
			set
			{
				UserAvatar previousValue = this._UserAvatar.Entity;
				if (((previousValue != value) 
							|| (this._UserAvatar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAvatar.Entity = null;
						previousValue.User = null;
					}
					this._UserAvatar.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserAvatar");
				}
			}
		}
		
		[Association(Name="User_Registration", Storage="_Registrations", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[Association(Name="User_Tournament", Storage="_Tournaments", ThisKey="UserID", OtherKey="TournamentDirectorUserID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[Association(Name="User_UsersTeam", Storage="_UsersTeams", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UsersTeam> UsersTeams
		{
			get
			{
				return this._UsersTeams;
			}
			set
			{
				this._UsersTeams.Assign(value);
			}
		}
		
		[Association(Name="User_Post", Storage="_ModifiedPosts", ThisKey="UserID", OtherKey="ModifyUserID")]
		public EntitySet<Post> ModifiedPosts
		{
			get
			{
				return this._ModifiedPosts;
			}
			set
			{
				this._ModifiedPosts.Assign(value);
			}
		}
		
		[Association(Name="User_Post1", Storage="_Posts", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="User_ThreadRead", Storage="_ThreadReads", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<ThreadRead> ThreadReads
		{
			get
			{
				return this._ThreadReads;
			}
			set
			{
				this._ThreadReads.Assign(value);
			}
		}
		
		[Association(Name="User_AuthFailure", Storage="_AuthFailures", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<AuthFailure> AuthFailures
		{
			get
			{
				return this._AuthFailures;
			}
			set
			{
				this._AuthFailures.Assign(value);
			}
		}
		
		[Association(Name="User_AutoLogin", Storage="_AutoLogins", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<AutoLogin> AutoLogins
		{
			get
			{
				return this._AutoLogins;
			}
			set
			{
				this._AutoLogins.Assign(value);
			}
		}
		
		[Association(Name="User_SecurityKey", Storage="_SecurityKey", ThisKey="UserID", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
		public SecurityKey SecurityKey
		{
			get
			{
				return this._SecurityKey.Entity;
			}
			set
			{
				SecurityKey previousValue = this._SecurityKey.Entity;
				if (((previousValue != value) 
							|| (this._SecurityKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityKey.Entity = null;
						previousValue.User = null;
					}
					this._SecurityKey.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("SecurityKey");
				}
			}
		}
		
		[Association(Name="User_Prize", Storage="_Prizes", ThisKey="UserID", OtherKey="WinnerUserId")]
		public EntitySet<Prize> Prizes
		{
			get
			{
				return this._Prizes;
			}
			set
			{
				this._Prizes.Assign(value);
			}
		}
		
		[Association(Name="User_Poll", Storage="_Polls", ThisKey="UserID", OtherKey="CreatorUserId")]
		public EntitySet<Poll> Polls
		{
			get
			{
				return this._Polls;
			}
			set
			{
				this._Polls.Assign(value);
			}
		}
		
		[Association(Name="User_UsersPollResponse", Storage="_UsersPollResponses", ThisKey="UserID", OtherKey="UserId")]
		public EntitySet<UsersPollResponse> UsersPollResponses
		{
			get
			{
				return this._UsersPollResponses;
			}
			set
			{
				this._UsersPollResponses.Assign(value);
			}
		}
		
		[Association(Name="User_EventImageUserTag1", Storage="_ImageTagsOf", ThisKey="UserID", OtherKey="TaggedUserUserId")]
		public EntitySet<EventImageUserTag> ImageTagsOf
		{
			get
			{
				return this._ImageTagsOf;
			}
			set
			{
				this._ImageTagsOf.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Titles(Title entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Titles(Title entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserAttributes(UserAttribute entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserAttributes(UserAttribute entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersTeams(UsersTeam entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersTeams(UsersTeam entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ModifiedPosts(Post entity)
		{
			this.SendPropertyChanging();
			entity.ModifyUser = this;
		}
		
		private void detach_ModifiedPosts(Post entity)
		{
			this.SendPropertyChanging();
			entity.ModifyUser = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ThreadReads(ThreadRead entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ThreadReads(ThreadRead entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AuthFailures(AuthFailure entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AuthFailures(AuthFailure entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AutoLogins(AutoLogin entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AutoLogins(AutoLogin entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Prizes(Prize entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Prizes(Prize entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Polls(Poll entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Polls(Poll entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersPollResponses(UsersPollResponse entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersPollResponses(UsersPollResponse entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ImageTagsOf(EventImageUserTag entity)
		{
			this.SendPropertyChanging();
			entity.TaggedUser = this;
		}
		
		private void detach_ImageTagsOf(EventImageUserTag entity)
		{
			this.SendPropertyChanging();
			entity.TaggedUser = null;
		}
	}
	
	[Table(Name="events.EventImages")]
	public partial class EventImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventImageID;
		
		private long _EventID;
		
		private string _ScrapeBusterKey;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _Image;
		
		private EntitySet<EventImageUserTag> _UserTags;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventImageIDChanging(long value);
    partial void OnEventImageIDChanged();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnScrapeBusterKeyChanging(string value);
    partial void OnScrapeBusterKeyChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    #endregion
		
		public EventImage()
		{
			this._UserTags = new EntitySet<EventImageUserTag>(new Action<EventImageUserTag>(this.attach_UserTags), new Action<EventImageUserTag>(this.detach_UserTags));
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[Column(Storage="_EventImageID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EventImageID
		{
			get
			{
				return this._EventImageID;
			}
			set
			{
				if ((this._EventImageID != value))
				{
					this.OnEventImageIDChanging(value);
					this.SendPropertyChanging();
					this._EventImageID = value;
					this.SendPropertyChanged("EventImageID");
					this.OnEventImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="BigInt NOT NULL")]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScrapeBusterKey", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ScrapeBusterKey
		{
			get
			{
				return this._ScrapeBusterKey;
			}
			set
			{
				if ((this._ScrapeBusterKey != value))
				{
					this.OnScrapeBusterKeyChanging(value);
					this.SendPropertyChanging();
					this._ScrapeBusterKey = value;
					this.SendPropertyChanged("ScrapeBusterKey");
					this.OnScrapeBusterKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image.Value;
			}
			set
			{
				if ((this._Image.Value != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image.Value = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[Association(Name="EventImage_EventImageUserTag", Storage="_UserTags", ThisKey="EventImageID", OtherKey="EventImageId")]
		public EntitySet<EventImageUserTag> UserTags
		{
			get
			{
				return this._UserTags;
			}
			set
			{
				this._UserTags.Assign(value);
			}
		}
		
		[Association(Name="Event_EventImage", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventImages.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventImages.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(long);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTags(EventImageUserTag entity)
		{
			this.SendPropertyChanging();
			entity.EventImage = this;
		}
		
		private void detach_UserTags(EventImageUserTag entity)
		{
			this.SendPropertyChanging();
			entity.EventImage = null;
		}
	}
	
	[Table(Name="events.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventID;
		
		private long _VenueID;
		
		private string _Title;
		
		private string _Info;
		
		private System.DateTime _BeginDateTime;
		
		private System.DateTime _EndDateTime;
		
		private long _Seats;
		
		private EntitySet<EventImage> _EventImages;
		
		private EntitySet<Registration> _Registrations;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntitySet<Prize> _Prizes;
		
		private EntityRef<Venue> _Venue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnBeginDateTimeChanging(System.DateTime value);
    partial void OnBeginDateTimeChanged();
    partial void OnEndDateTimeChanging(System.DateTime value);
    partial void OnEndDateTimeChanged();
    partial void OnSeatsChanging(long value);
    partial void OnSeatsChanged();
    #endregion
		
		public Event()
		{
			this._EventImages = new EntitySet<EventImage>(new Action<EventImage>(this.attach_EventImages), new Action<EventImage>(this.detach_EventImages));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._Prizes = new EntitySet<Prize>(new Action<Prize>(this.attach_Prizes), new Action<Prize>(this.detach_Prizes));
			this._Venue = default(EntityRef<Venue>);
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_VenueID", DbType="BigInt NOT NULL")]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					if (this._Venue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDateTime
		{
			get
			{
				return this._BeginDateTime;
			}
			set
			{
				if ((this._BeginDateTime != value))
				{
					this.OnBeginDateTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginDateTime = value;
					this.SendPropertyChanged("BeginDateTime");
					this.OnBeginDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Seats", DbType="BigInt NOT NULL")]
		public long Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				if ((this._Seats != value))
				{
					this.OnSeatsChanging(value);
					this.SendPropertyChanging();
					this._Seats = value;
					this.SendPropertyChanged("Seats");
					this.OnSeatsChanged();
				}
			}
		}
		
		[Association(Name="Event_EventImage", Storage="_EventImages", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<EventImage> EventImages
		{
			get
			{
				return this._EventImages;
			}
			set
			{
				this._EventImages.Assign(value);
			}
		}
		
		[Association(Name="Event_Registration", Storage="_Registrations", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[Association(Name="Event_Tournament", Storage="_Tournaments", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[Association(Name="Event_Prize", Storage="_Prizes", ThisKey="EventID", OtherKey="EventId")]
		public EntitySet<Prize> Prizes
		{
			get
			{
				return this._Prizes;
			}
			set
			{
				this._Prizes.Assign(value);
			}
		}
		
		[Association(Name="Venue_Event", Storage="_Venue", ThisKey="VenueID", OtherKey="VenueID", IsForeignKey=true)]
		public Venue Venue
		{
			get
			{
				return this._Venue.Entity;
			}
			set
			{
				Venue previousValue = this._Venue.Entity;
				if (((previousValue != value) 
							|| (this._Venue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Venue.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._VenueID = value.VenueID;
					}
					else
					{
						this._VenueID = default(long);
					}
					this.SendPropertyChanged("Venue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventImages(EventImage entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventImages(EventImage entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Prizes(Prize entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Prizes(Prize entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[Table(Name="events.Pairings")]
	public partial class Pairing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PairingID;
		
		private long _RoundID;
		
		private EntitySet<TeamsPairing> _TeamsPairings;
		
		private EntityRef<Round> _Round;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPairingIDChanging(long value);
    partial void OnPairingIDChanged();
    partial void OnRoundIDChanging(long value);
    partial void OnRoundIDChanged();
    #endregion
		
		public Pairing()
		{
			this._TeamsPairings = new EntitySet<TeamsPairing>(new Action<TeamsPairing>(this.attach_TeamsPairings), new Action<TeamsPairing>(this.detach_TeamsPairings));
			this._Round = default(EntityRef<Round>);
			OnCreated();
		}
		
		[Column(Storage="_PairingID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PairingID
		{
			get
			{
				return this._PairingID;
			}
			set
			{
				if ((this._PairingID != value))
				{
					this.OnPairingIDChanging(value);
					this.SendPropertyChanging();
					this._PairingID = value;
					this.SendPropertyChanged("PairingID");
					this.OnPairingIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoundID", DbType="BigInt NOT NULL")]
		public long RoundID
		{
			get
			{
				return this._RoundID;
			}
			set
			{
				if ((this._RoundID != value))
				{
					if (this._Round.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundIDChanging(value);
					this.SendPropertyChanging();
					this._RoundID = value;
					this.SendPropertyChanged("RoundID");
					this.OnRoundIDChanged();
				}
			}
		}
		
		[Association(Name="Pairing_TeamsPairing", Storage="_TeamsPairings", ThisKey="PairingID", OtherKey="PairingID")]
		public EntitySet<TeamsPairing> TeamsPairings
		{
			get
			{
				return this._TeamsPairings;
			}
			set
			{
				this._TeamsPairings.Assign(value);
			}
		}
		
		[Association(Name="Round_Pairing", Storage="_Round", ThisKey="RoundID", OtherKey="RoundID", IsForeignKey=true)]
		public Round Round
		{
			get
			{
				return this._Round.Entity;
			}
			set
			{
				Round previousValue = this._Round.Entity;
				if (((previousValue != value) 
							|| (this._Round.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Round.Entity = null;
						previousValue.Pairings.Remove(this);
					}
					this._Round.Entity = value;
					if ((value != null))
					{
						value.Pairings.Add(this);
						this._RoundID = value.RoundID;
					}
					else
					{
						this._RoundID = default(long);
					}
					this.SendPropertyChanged("Round");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamsPairings(TeamsPairing entity)
		{
			this.SendPropertyChanging();
			entity.Pairing = this;
		}
		
		private void detach_TeamsPairings(TeamsPairing entity)
		{
			this.SendPropertyChanging();
			entity.Pairing = null;
		}
	}
	
	[Table(Name="events.Registrations")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventID;
		
		private long _UserID;
		
		private System.DateTime _RegistrationDate;
		
		private bool _IsCheckedIn;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnIsCheckedInChanging(bool value);
    partial void OnIsCheckedInChanged();
    #endregion
		
		public Registration()
		{
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EventID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsCheckedIn", DbType="Bit NOT NULL")]
		public bool IsCheckedIn
		{
			get
			{
				return this._IsCheckedIn;
			}
			set
			{
				if ((this._IsCheckedIn != value))
				{
					this.OnIsCheckedInChanging(value);
					this.SendPropertyChanging();
					this._IsCheckedIn = value;
					this.SendPropertyChanged("IsCheckedIn");
					this.OnIsCheckedInChanged();
				}
			}
		}
		
		[Association(Name="Event_Registration", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(long);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="User_Registration", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="events.Rounds")]
	public partial class Round : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RoundID;
		
		private long _TournamentID;
		
		private int _RoundNumber;
		
		private EntitySet<Pairing> _Pairings;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoundIDChanging(long value);
    partial void OnRoundIDChanged();
    partial void OnTournamentIDChanging(long value);
    partial void OnTournamentIDChanged();
    partial void OnRoundNumberChanging(int value);
    partial void OnRoundNumberChanged();
    #endregion
		
		public Round()
		{
			this._Pairings = new EntitySet<Pairing>(new Action<Pairing>(this.attach_Pairings), new Action<Pairing>(this.detach_Pairings));
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[Column(Storage="_RoundID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RoundID
		{
			get
			{
				return this._RoundID;
			}
			set
			{
				if ((this._RoundID != value))
				{
					this.OnRoundIDChanging(value);
					this.SendPropertyChanging();
					this._RoundID = value;
					this.SendPropertyChanged("RoundID");
					this.OnRoundIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentID", DbType="BigInt NOT NULL")]
		public long TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoundNumber", DbType="Int NOT NULL")]
		public int RoundNumber
		{
			get
			{
				return this._RoundNumber;
			}
			set
			{
				if ((this._RoundNumber != value))
				{
					this.OnRoundNumberChanging(value);
					this.SendPropertyChanging();
					this._RoundNumber = value;
					this.SendPropertyChanged("RoundNumber");
					this.OnRoundNumberChanged();
				}
			}
		}
		
		[Association(Name="Round_Pairing", Storage="_Pairings", ThisKey="RoundID", OtherKey="RoundID")]
		public EntitySet<Pairing> Pairings
		{
			get
			{
				return this._Pairings;
			}
			set
			{
				this._Pairings.Assign(value);
			}
		}
		
		[Association(Name="Tournament_Round", Storage="_Tournament", ThisKey="TournamentID", OtherKey="TournamentID", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Rounds.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Rounds.Add(this);
						this._TournamentID = value.TournamentID;
					}
					else
					{
						this._TournamentID = default(long);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pairings(Pairing entity)
		{
			this.SendPropertyChanging();
			entity.Round = this;
		}
		
		private void detach_Pairings(Pairing entity)
		{
			this.SendPropertyChanging();
			entity.Round = null;
		}
	}
	
	[Table(Name="events.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TeamID;
		
		private long _TournamentID;
		
		private string _TeamName;
		
		private string _TeamTagFormat;
		
		private EntitySet<TeamsPairing> _TeamsPairings;
		
		private EntitySet<UsersTeam> _UsersTeams;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(long value);
    partial void OnTeamIDChanged();
    partial void OnTournamentIDChanging(long value);
    partial void OnTournamentIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamTagFormatChanging(string value);
    partial void OnTeamTagFormatChanged();
    #endregion
		
		public Team()
		{
			this._TeamsPairings = new EntitySet<TeamsPairing>(new Action<TeamsPairing>(this.attach_TeamsPairings), new Action<TeamsPairing>(this.detach_TeamsPairings));
			this._UsersTeams = new EntitySet<UsersTeam>(new Action<UsersTeam>(this.attach_UsersTeams), new Action<UsersTeam>(this.detach_UsersTeams));
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[Column(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentID", DbType="BigInt NOT NULL")]
		public long TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[Column(Storage="_TeamTagFormat", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamTagFormat
		{
			get
			{
				return this._TeamTagFormat;
			}
			set
			{
				if ((this._TeamTagFormat != value))
				{
					this.OnTeamTagFormatChanging(value);
					this.SendPropertyChanging();
					this._TeamTagFormat = value;
					this.SendPropertyChanged("TeamTagFormat");
					this.OnTeamTagFormatChanged();
				}
			}
		}
		
		[Association(Name="Team_TeamsPairing", Storage="_TeamsPairings", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<TeamsPairing> TeamsPairings
		{
			get
			{
				return this._TeamsPairings;
			}
			set
			{
				this._TeamsPairings.Assign(value);
			}
		}
		
		[Association(Name="Team_UsersTeam", Storage="_UsersTeams", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<UsersTeam> UsersTeams
		{
			get
			{
				return this._UsersTeams;
			}
			set
			{
				this._UsersTeams.Assign(value);
			}
		}
		
		[Association(Name="Tournament_Team", Storage="_Tournament", ThisKey="TournamentID", OtherKey="TournamentID", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._TournamentID = value.TournamentID;
					}
					else
					{
						this._TournamentID = default(long);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamsPairings(TeamsPairing entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamsPairings(TeamsPairing entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_UsersTeams(UsersTeam entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_UsersTeams(UsersTeam entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[Table(Name="events.TeamsPairings")]
	public partial class TeamsPairing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TeamPairingID;
		
		private long _TeamID;
		
		private long _PairingID;
		
		private string _Score;
		
		private EntityRef<Pairing> _Pairing;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamPairingIDChanging(long value);
    partial void OnTeamPairingIDChanged();
    partial void OnTeamIDChanging(long value);
    partial void OnTeamIDChanged();
    partial void OnPairingIDChanging(long value);
    partial void OnPairingIDChanged();
    partial void OnScoreChanging(string value);
    partial void OnScoreChanged();
    #endregion
		
		public TeamsPairing()
		{
			this._Pairing = default(EntityRef<Pairing>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[Column(Storage="_TeamPairingID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TeamPairingID
		{
			get
			{
				return this._TeamPairingID;
			}
			set
			{
				if ((this._TeamPairingID != value))
				{
					this.OnTeamPairingIDChanging(value);
					this.SendPropertyChanging();
					this._TeamPairingID = value;
					this.SendPropertyChanged("TeamPairingID");
					this.OnTeamPairingIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamID", DbType="BigInt NOT NULL")]
		public long TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_PairingID", DbType="BigInt NOT NULL")]
		public long PairingID
		{
			get
			{
				return this._PairingID;
			}
			set
			{
				if ((this._PairingID != value))
				{
					if (this._Pairing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPairingIDChanging(value);
					this.SendPropertyChanging();
					this._PairingID = value;
					this.SendPropertyChanged("PairingID");
					this.OnPairingIDChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="NVarChar(50)")]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="Pairing_TeamsPairing", Storage="_Pairing", ThisKey="PairingID", OtherKey="PairingID", IsForeignKey=true)]
		public Pairing Pairing
		{
			get
			{
				return this._Pairing.Entity;
			}
			set
			{
				Pairing previousValue = this._Pairing.Entity;
				if (((previousValue != value) 
							|| (this._Pairing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pairing.Entity = null;
						previousValue.TeamsPairings.Remove(this);
					}
					this._Pairing.Entity = value;
					if ((value != null))
					{
						value.TeamsPairings.Add(this);
						this._PairingID = value.PairingID;
					}
					else
					{
						this._PairingID = default(long);
					}
					this.SendPropertyChanged("Pairing");
				}
			}
		}
		
		[Association(Name="Team_TeamsPairing", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamsPairings.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamsPairings.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(long);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="events.Tournaments")]
	public partial class Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TournamentID;
		
		private long _EventID;
		
		private System.Nullable<long> _TournamentDirectorUserID;
		
		private string _Title;
		
		private string _Game;
		
		private string _ScoreMode;
		
		private string _PairingsGenerator;
		
		private int _TeamSize;
		
		private bool _AllowLateEntry;
		
		private bool _IsLocked;
		
		private string _GameInfo;
		
		private string _ServerSettings;
		
		private EntitySet<Round> _Rounds;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTournamentIDChanging(long value);
    partial void OnTournamentIDChanged();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnTournamentDirectorUserIDChanging(System.Nullable<long> value);
    partial void OnTournamentDirectorUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGameChanging(string value);
    partial void OnGameChanged();
    partial void OnScoreModeChanging(string value);
    partial void OnScoreModeChanged();
    partial void OnPairingsGeneratorChanging(string value);
    partial void OnPairingsGeneratorChanged();
    partial void OnTeamSizeChanging(int value);
    partial void OnTeamSizeChanged();
    partial void OnAllowLateEntryChanging(bool value);
    partial void OnAllowLateEntryChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    partial void OnGameInfoChanging(string value);
    partial void OnGameInfoChanged();
    partial void OnServerSettingsChanging(string value);
    partial void OnServerSettingsChanged();
    #endregion
		
		public Tournament()
		{
			this._Rounds = new EntitySet<Round>(new Action<Round>(this.attach_Rounds), new Action<Round>(this.detach_Rounds));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_TournamentID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="BigInt NOT NULL")]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentDirectorUserID", DbType="BigInt")]
		public System.Nullable<long> TournamentDirectorUserID
		{
			get
			{
				return this._TournamentDirectorUserID;
			}
			set
			{
				if ((this._TournamentDirectorUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentDirectorUserIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentDirectorUserID = value;
					this.SendPropertyChanged("TournamentDirectorUserID");
					this.OnTournamentDirectorUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="NVarChar(150)")]
		public string Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_ScoreMode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ScoreMode
		{
			get
			{
				return this._ScoreMode;
			}
			set
			{
				if ((this._ScoreMode != value))
				{
					this.OnScoreModeChanging(value);
					this.SendPropertyChanging();
					this._ScoreMode = value;
					this.SendPropertyChanged("ScoreMode");
					this.OnScoreModeChanged();
				}
			}
		}
		
		[Column(Storage="_PairingsGenerator", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string PairingsGenerator
		{
			get
			{
				return this._PairingsGenerator;
			}
			set
			{
				if ((this._PairingsGenerator != value))
				{
					this.OnPairingsGeneratorChanging(value);
					this.SendPropertyChanging();
					this._PairingsGenerator = value;
					this.SendPropertyChanged("PairingsGenerator");
					this.OnPairingsGeneratorChanged();
				}
			}
		}
		
		[Column(Storage="_TeamSize", DbType="Int NOT NULL")]
		public int TeamSize
		{
			get
			{
				return this._TeamSize;
			}
			set
			{
				if ((this._TeamSize != value))
				{
					this.OnTeamSizeChanging(value);
					this.SendPropertyChanging();
					this._TeamSize = value;
					this.SendPropertyChanged("TeamSize");
					this.OnTeamSizeChanged();
				}
			}
		}
		
		[Column(Storage="_AllowLateEntry", DbType="Bit NOT NULL")]
		public bool AllowLateEntry
		{
			get
			{
				return this._AllowLateEntry;
			}
			set
			{
				if ((this._AllowLateEntry != value))
				{
					this.OnAllowLateEntryChanging(value);
					this.SendPropertyChanging();
					this._AllowLateEntry = value;
					this.SendPropertyChanged("AllowLateEntry");
					this.OnAllowLateEntryChanged();
				}
			}
		}
		
		[Column(Storage="_IsLocked", DbType="Bit NOT NULL")]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[Column(Storage="_GameInfo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string GameInfo
		{
			get
			{
				return this._GameInfo;
			}
			set
			{
				if ((this._GameInfo != value))
				{
					this.OnGameInfoChanging(value);
					this.SendPropertyChanging();
					this._GameInfo = value;
					this.SendPropertyChanged("GameInfo");
					this.OnGameInfoChanged();
				}
			}
		}
		
		[Column(Storage="_ServerSettings", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ServerSettings
		{
			get
			{
				return this._ServerSettings;
			}
			set
			{
				if ((this._ServerSettings != value))
				{
					this.OnServerSettingsChanging(value);
					this.SendPropertyChanging();
					this._ServerSettings = value;
					this.SendPropertyChanged("ServerSettings");
					this.OnServerSettingsChanged();
				}
			}
		}
		
		[Association(Name="Tournament_Round", Storage="_Rounds", ThisKey="TournamentID", OtherKey="TournamentID")]
		public EntitySet<Round> Rounds
		{
			get
			{
				return this._Rounds;
			}
			set
			{
				this._Rounds.Assign(value);
			}
		}
		
		[Association(Name="Tournament_Team", Storage="_Teams", ThisKey="TournamentID", OtherKey="TournamentID")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[Association(Name="Event_Tournament", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(long);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="User_Tournament", Storage="_User", ThisKey="TournamentDirectorUserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._TournamentDirectorUserID = value.UserID;
					}
					else
					{
						this._TournamentDirectorUserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
	}
	
	[Table(Name="events.UsersTeams")]
	public partial class UsersTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserTeamID;
		
		private long _TeamID;
		
		private long _UserID;
		
		private bool _IsTeamCaptain;
		
		private int _Rating;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTeamIDChanging(long value);
    partial void OnUserTeamIDChanged();
    partial void OnTeamIDChanging(long value);
    partial void OnTeamIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnIsTeamCaptainChanging(bool value);
    partial void OnIsTeamCaptainChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
		
		public UsersTeam()
		{
			this._Team = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserTeamID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserTeamID
		{
			get
			{
				return this._UserTeamID;
			}
			set
			{
				if ((this._UserTeamID != value))
				{
					this.OnUserTeamIDChanging(value);
					this.SendPropertyChanging();
					this._UserTeamID = value;
					this.SendPropertyChanged("UserTeamID");
					this.OnUserTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamID", DbType="BigInt NOT NULL")]
		public long TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsTeamCaptain", DbType="Bit NOT NULL")]
		public bool IsTeamCaptain
		{
			get
			{
				return this._IsTeamCaptain;
			}
			set
			{
				if ((this._IsTeamCaptain != value))
				{
					this.OnIsTeamCaptainChanging(value);
					this.SendPropertyChanging();
					this._IsTeamCaptain = value;
					this.SendPropertyChanged("IsTeamCaptain");
					this.OnIsTeamCaptainChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="Team_UsersTeam", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.UsersTeams.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.UsersTeams.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(long);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[Association(Name="User_UsersTeam", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersTeams.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersTeams.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="events.Venues")]
	public partial class Venue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VenueID;
		
		private string _Name;
		
		private string _Address;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Venue()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[Column(Storage="_VenueID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Decimal(8,5)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Decimal(8,5)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Association(Name="Venue_Event", Storage="_Events", ThisKey="VenueID", OtherKey="VenueID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Venue = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Venue = null;
		}
	}
	
	[Table(Name="forums.ForumGroups")]
	public partial class ForumGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ForumGroupID;
		
		private string _Name;
		
		private int _Order;
		
		private EntitySet<ForumGroupsAccess> _ForumGroupsAccesses;
		
		private EntitySet<Forum> _Forums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumGroupIDChanging(long value);
    partial void OnForumGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public ForumGroup()
		{
			this._ForumGroupsAccesses = new EntitySet<ForumGroupsAccess>(new Action<ForumGroupsAccess>(this.attach_ForumGroupsAccesses), new Action<ForumGroupsAccess>(this.detach_ForumGroupsAccesses));
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			OnCreated();
		}
		
		[Column(Storage="_ForumGroupID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ForumGroupID
		{
			get
			{
				return this._ForumGroupID;
			}
			set
			{
				if ((this._ForumGroupID != value))
				{
					this.OnForumGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ForumGroupID = value;
					this.SendPropertyChanged("ForumGroupID");
					this.OnForumGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Association(Name="ForumGroup_ForumGroupsAccess", Storage="_ForumGroupsAccesses", ThisKey="ForumGroupID", OtherKey="ForumGroupID")]
		public EntitySet<ForumGroupsAccess> ForumGroupsAccesses
		{
			get
			{
				return this._ForumGroupsAccesses;
			}
			set
			{
				this._ForumGroupsAccesses.Assign(value);
			}
		}
		
		[Association(Name="ForumGroup_Forum", Storage="_Forums", ThisKey="ForumGroupID", OtherKey="ForumGroupID")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumGroupsAccesses(ForumGroupsAccess entity)
		{
			this.SendPropertyChanging();
			entity.ForumGroup = this;
		}
		
		private void detach_ForumGroupsAccesses(ForumGroupsAccess entity)
		{
			this.SendPropertyChanging();
			entity.ForumGroup = null;
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.ForumGroup = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.ForumGroup = null;
		}
	}
	
	[Table(Name="forums.ForumGroupsAccess")]
	public partial class ForumGroupsAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ForumGroupID;
		
		private string _AccessType;
		
		private long _AccessControlListID;
		
		private EntityRef<ForumGroup> _ForumGroup;
		
		private EntityRef<AccessControlList> _AccessControlList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumGroupIDChanging(long value);
    partial void OnForumGroupIDChanged();
    partial void OnAccessTypeChanging(string value);
    partial void OnAccessTypeChanged();
    partial void OnAccessControlListIDChanging(long value);
    partial void OnAccessControlListIDChanged();
    #endregion
		
		public ForumGroupsAccess()
		{
			this._ForumGroup = default(EntityRef<ForumGroup>);
			this._AccessControlList = default(EntityRef<AccessControlList>);
			OnCreated();
		}
		
		[Column(Storage="_ForumGroupID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ForumGroupID
		{
			get
			{
				return this._ForumGroupID;
			}
			set
			{
				if ((this._ForumGroupID != value))
				{
					if (this._ForumGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ForumGroupID = value;
					this.SendPropertyChanged("ForumGroupID");
					this.OnForumGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessType", DbType="NVarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccessType
		{
			get
			{
				return this._AccessType;
			}
			set
			{
				if ((this._AccessType != value))
				{
					this.OnAccessTypeChanging(value);
					this.SendPropertyChanging();
					this._AccessType = value;
					this.SendPropertyChanged("AccessType");
					this.OnAccessTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AccessControlListID", DbType="BigInt NOT NULL")]
		public long AccessControlListID
		{
			get
			{
				return this._AccessControlListID;
			}
			set
			{
				if ((this._AccessControlListID != value))
				{
					if (this._AccessControlList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessControlListIDChanging(value);
					this.SendPropertyChanging();
					this._AccessControlListID = value;
					this.SendPropertyChanged("AccessControlListID");
					this.OnAccessControlListIDChanged();
				}
			}
		}
		
		[Association(Name="ForumGroup_ForumGroupsAccess", Storage="_ForumGroup", ThisKey="ForumGroupID", OtherKey="ForumGroupID", IsForeignKey=true)]
		public ForumGroup ForumGroup
		{
			get
			{
				return this._ForumGroup.Entity;
			}
			set
			{
				ForumGroup previousValue = this._ForumGroup.Entity;
				if (((previousValue != value) 
							|| (this._ForumGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumGroup.Entity = null;
						previousValue.ForumGroupsAccesses.Remove(this);
					}
					this._ForumGroup.Entity = value;
					if ((value != null))
					{
						value.ForumGroupsAccesses.Add(this);
						this._ForumGroupID = value.ForumGroupID;
					}
					else
					{
						this._ForumGroupID = default(long);
					}
					this.SendPropertyChanged("ForumGroup");
				}
			}
		}
		
		[Association(Name="AccessControlList_ForumGroupsAccess", Storage="_AccessControlList", ThisKey="AccessControlListID", OtherKey="AccessControlListID", IsForeignKey=true)]
		public AccessControlList AccessControlList
		{
			get
			{
				return this._AccessControlList.Entity;
			}
			set
			{
				AccessControlList previousValue = this._AccessControlList.Entity;
				if (((previousValue != value) 
							|| (this._AccessControlList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessControlList.Entity = null;
						previousValue.ForumGroupsAccesses.Remove(this);
					}
					this._AccessControlList.Entity = value;
					if ((value != null))
					{
						value.ForumGroupsAccesses.Add(this);
						this._AccessControlListID = value.AccessControlListID;
					}
					else
					{
						this._AccessControlListID = default(long);
					}
					this.SendPropertyChanged("AccessControlList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="forums.Forums")]
	public partial class Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ForumID;
		
		private long _ForumGroupID;
		
		private string _Name;
		
		private string _Description;
		
		private int _Order;
		
		private EntitySet<ForumsAccess> _ForumsAccesses;
		
		private EntitySet<Thread> _Threads;
		
		private EntityRef<ForumGroup> _ForumGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIDChanging(long value);
    partial void OnForumIDChanged();
    partial void OnForumGroupIDChanging(long value);
    partial void OnForumGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public Forum()
		{
			this._ForumsAccesses = new EntitySet<ForumsAccess>(new Action<ForumsAccess>(this.attach_ForumsAccesses), new Action<ForumsAccess>(this.detach_ForumsAccesses));
			this._Threads = new EntitySet<Thread>(new Action<Thread>(this.attach_Threads), new Action<Thread>(this.detach_Threads));
			this._ForumGroup = default(EntityRef<ForumGroup>);
			OnCreated();
		}
		
		[Column(Storage="_ForumID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[Column(Storage="_ForumGroupID", DbType="BigInt NOT NULL")]
		public long ForumGroupID
		{
			get
			{
				return this._ForumGroupID;
			}
			set
			{
				if ((this._ForumGroupID != value))
				{
					if (this._ForumGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ForumGroupID = value;
					this.SendPropertyChanged("ForumGroupID");
					this.OnForumGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Association(Name="Forum_ForumsAccess", Storage="_ForumsAccesses", ThisKey="ForumID", OtherKey="ForumID")]
		public EntitySet<ForumsAccess> ForumsAccesses
		{
			get
			{
				return this._ForumsAccesses;
			}
			set
			{
				this._ForumsAccesses.Assign(value);
			}
		}
		
		[Association(Name="Forum_Thread", Storage="_Threads", ThisKey="ForumID", OtherKey="ForumID")]
		public EntitySet<Thread> Threads
		{
			get
			{
				return this._Threads;
			}
			set
			{
				this._Threads.Assign(value);
			}
		}
		
		[Association(Name="ForumGroup_Forum", Storage="_ForumGroup", ThisKey="ForumGroupID", OtherKey="ForumGroupID", IsForeignKey=true)]
		public ForumGroup ForumGroup
		{
			get
			{
				return this._ForumGroup.Entity;
			}
			set
			{
				ForumGroup previousValue = this._ForumGroup.Entity;
				if (((previousValue != value) 
							|| (this._ForumGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumGroup.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._ForumGroup.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._ForumGroupID = value.ForumGroupID;
					}
					else
					{
						this._ForumGroupID = default(long);
					}
					this.SendPropertyChanged("ForumGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumsAccesses(ForumsAccess entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_ForumsAccesses(ForumsAccess entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
	}
	
	[Table(Name="forums.ForumsAccess")]
	public partial class ForumsAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ForumID;
		
		private string _AccessType;
		
		private long _AccessControlListID;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<AccessControlList> _AccessControlList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIDChanging(long value);
    partial void OnForumIDChanged();
    partial void OnAccessTypeChanging(string value);
    partial void OnAccessTypeChanged();
    partial void OnAccessControlListIDChanging(long value);
    partial void OnAccessControlListIDChanged();
    #endregion
		
		public ForumsAccess()
		{
			this._Forum = default(EntityRef<Forum>);
			this._AccessControlList = default(EntityRef<AccessControlList>);
			OnCreated();
		}
		
		[Column(Storage="_ForumID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessType", DbType="NVarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccessType
		{
			get
			{
				return this._AccessType;
			}
			set
			{
				if ((this._AccessType != value))
				{
					this.OnAccessTypeChanging(value);
					this.SendPropertyChanging();
					this._AccessType = value;
					this.SendPropertyChanged("AccessType");
					this.OnAccessTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AccessControlListID", DbType="BigInt NOT NULL")]
		public long AccessControlListID
		{
			get
			{
				return this._AccessControlListID;
			}
			set
			{
				if ((this._AccessControlListID != value))
				{
					if (this._AccessControlList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessControlListIDChanging(value);
					this.SendPropertyChanging();
					this._AccessControlListID = value;
					this.SendPropertyChanged("AccessControlListID");
					this.OnAccessControlListIDChanged();
				}
			}
		}
		
		[Association(Name="Forum_ForumsAccess", Storage="_Forum", ThisKey="ForumID", OtherKey="ForumID", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.ForumsAccesses.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.ForumsAccesses.Add(this);
						this._ForumID = value.ForumID;
					}
					else
					{
						this._ForumID = default(long);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[Association(Name="AccessControlList_ForumsAccess", Storage="_AccessControlList", ThisKey="AccessControlListID", OtherKey="AccessControlListID", IsForeignKey=true)]
		public AccessControlList AccessControlList
		{
			get
			{
				return this._AccessControlList.Entity;
			}
			set
			{
				AccessControlList previousValue = this._AccessControlList.Entity;
				if (((previousValue != value) 
							|| (this._AccessControlList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessControlList.Entity = null;
						previousValue.ForumsAccesses.Remove(this);
					}
					this._AccessControlList.Entity = value;
					if ((value != null))
					{
						value.ForumsAccesses.Add(this);
						this._AccessControlListID = value.AccessControlListID;
					}
					else
					{
						this._AccessControlListID = default(long);
					}
					this.SendPropertyChanged("AccessControlList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="forums.Posts")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PostID;
		
		private long _ThreadID;
		
		private System.Nullable<long> _ResponseToPostID;
		
		private long _UserID;
		
		private string _Title;
		
		private string _Text;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _ModifyDate;
		
		private System.Nullable<long> _ModifyUserID;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _ModifyUser;
		
		private EntityRef<User> _User;
		
		private EntityRef<Thread> _Thread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIDChanging(long value);
    partial void OnPostIDChanged();
    partial void OnThreadIDChanging(long value);
    partial void OnThreadIDChanged();
    partial void OnResponseToPostIDChanging(System.Nullable<long> value);
    partial void OnResponseToPostIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.DateTime value);
    partial void OnModifyDateChanged();
    partial void OnModifyUserIDChanging(System.Nullable<long> value);
    partial void OnModifyUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Post()
		{
			this._ModifyUser = default(EntityRef<User>);
			this._User = default(EntityRef<User>);
			this._Thread = default(EntityRef<Thread>);
			OnCreated();
		}
		
		[Column(Storage="_PostID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[Column(Storage="_ThreadID", DbType="BigInt NOT NULL")]
		public long ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResponseToPostID", DbType="BigInt")]
		public System.Nullable<long> ResponseToPostID
		{
			get
			{
				return this._ResponseToPostID;
			}
			set
			{
				if ((this._ResponseToPostID != value))
				{
					this.OnResponseToPostIDChanging(value);
					this.SendPropertyChanging();
					this._ResponseToPostID = value;
					this.SendPropertyChanged("ResponseToPostID");
					this.OnResponseToPostIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyUserID", DbType="BigInt")]
		public System.Nullable<long> ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					if (this._ModifyUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="User_Post", Storage="_ModifyUser", ThisKey="ModifyUserID", OtherKey="UserID", IsForeignKey=true)]
		public User ModifyUser
		{
			get
			{
				return this._ModifyUser.Entity;
			}
			set
			{
				User previousValue = this._ModifyUser.Entity;
				if (((previousValue != value) 
							|| (this._ModifyUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModifyUser.Entity = null;
						previousValue.ModifiedPosts.Remove(this);
					}
					this._ModifyUser.Entity = value;
					if ((value != null))
					{
						value.ModifiedPosts.Add(this);
						this._ModifyUserID = value.UserID;
					}
					else
					{
						this._ModifyUserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ModifyUser");
				}
			}
		}
		
		[Association(Name="User_Post1", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Thread_Post", Storage="_Thread", ThisKey="ThreadID", OtherKey="ThreadID", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._ThreadID = value.ThreadID;
					}
					else
					{
						this._ThreadID = default(long);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="forums.ThreadLevels")]
	public partial class ThreadLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Level;
		
		private string _Name;
		
		private EntitySet<Thread> _Threads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelChanging(long value);
    partial void OnLevelChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ThreadLevel()
		{
			this._Threads = new EntitySet<Thread>(new Action<Thread>(this.attach_Threads), new Action<Thread>(this.detach_Threads));
			OnCreated();
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ThreadLevel_Thread", Storage="_Threads", ThisKey="Level", OtherKey="Level")]
		public EntitySet<Thread> Threads
		{
			get
			{
				return this._Threads;
			}
			set
			{
				this._Threads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.ThreadLevel = this;
		}
		
		private void detach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.ThreadLevel = null;
		}
	}
	
	[Table(Name="forums.ThreadRead")]
	public partial class ThreadRead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ThreadReadID;
		
		private long _ThreadID;
		
		private long _UserID;
		
		private System.DateTime _DateRead;
		
		private EntityRef<User> _User;
		
		private EntityRef<Thread> _Thread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadReadIDChanging(long value);
    partial void OnThreadReadIDChanged();
    partial void OnThreadIDChanging(long value);
    partial void OnThreadIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnDateReadChanging(System.DateTime value);
    partial void OnDateReadChanged();
    #endregion
		
		public ThreadRead()
		{
			this._User = default(EntityRef<User>);
			this._Thread = default(EntityRef<Thread>);
			OnCreated();
		}
		
		[Column(Storage="_ThreadReadID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ThreadReadID
		{
			get
			{
				return this._ThreadReadID;
			}
			set
			{
				if ((this._ThreadReadID != value))
				{
					this.OnThreadReadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadReadID = value;
					this.SendPropertyChanged("ThreadReadID");
					this.OnThreadReadIDChanged();
				}
			}
		}
		
		[Column(Storage="_ThreadID", DbType="BigInt NOT NULL")]
		public long ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateRead", DbType="DateTime NOT NULL")]
		public System.DateTime DateRead
		{
			get
			{
				return this._DateRead;
			}
			set
			{
				if ((this._DateRead != value))
				{
					this.OnDateReadChanging(value);
					this.SendPropertyChanging();
					this._DateRead = value;
					this.SendPropertyChanged("DateRead");
					this.OnDateReadChanged();
				}
			}
		}
		
		[Association(Name="User_ThreadRead", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ThreadReads.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ThreadReads.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Thread_ThreadRead", Storage="_Thread", ThisKey="ThreadID", OtherKey="ThreadID", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.ThreadReads.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.ThreadReads.Add(this);
						this._ThreadID = value.ThreadID;
					}
					else
					{
						this._ThreadID = default(long);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="forums.Threads")]
	public partial class Thread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ThreadID;
		
		private long _ForumID;
		
		private string _Title;
		
		private System.DateTime _CreateDate;
		
		private long _Level;
		
		private long _Views;
		
		private bool _IsLocked;
		
		private bool _IsDeleted;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<ThreadRead> _ThreadReads;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<ThreadLevel> _ThreadLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadIDChanging(long value);
    partial void OnThreadIDChanged();
    partial void OnForumIDChanging(long value);
    partial void OnForumIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLevelChanging(long value);
    partial void OnLevelChanged();
    partial void OnViewsChanging(long value);
    partial void OnViewsChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Thread()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._ThreadReads = new EntitySet<ThreadRead>(new Action<ThreadRead>(this.attach_ThreadReads), new Action<ThreadRead>(this.detach_ThreadReads));
			this._Forum = default(EntityRef<Forum>);
			this._ThreadLevel = default(EntityRef<ThreadLevel>);
			OnCreated();
		}
		
		[Column(Storage="_ThreadID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[Column(Storage="_ForumID", DbType="BigInt NOT NULL")]
		public long ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="BigInt NOT NULL")]
		public long Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Views", DbType="BigInt NOT NULL")]
		public long Views
		{
			get
			{
				return this._Views;
			}
			set
			{
				if ((this._Views != value))
				{
					this.OnViewsChanging(value);
					this.SendPropertyChanging();
					this._Views = value;
					this.SendPropertyChanged("Views");
					this.OnViewsChanged();
				}
			}
		}
		
		[Column(Storage="_IsLocked", DbType="Bit NOT NULL")]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Thread_Post", Storage="_Posts", ThisKey="ThreadID", OtherKey="ThreadID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="Thread_ThreadRead", Storage="_ThreadReads", ThisKey="ThreadID", OtherKey="ThreadID")]
		public EntitySet<ThreadRead> ThreadReads
		{
			get
			{
				return this._ThreadReads;
			}
			set
			{
				this._ThreadReads.Assign(value);
			}
		}
		
		[Association(Name="Forum_Thread", Storage="_Forum", ThisKey="ForumID", OtherKey="ForumID", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Threads.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Threads.Add(this);
						this._ForumID = value.ForumID;
					}
					else
					{
						this._ForumID = default(long);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[Association(Name="ThreadLevel_Thread", Storage="_ThreadLevel", ThisKey="Level", OtherKey="Level", IsForeignKey=true)]
		public ThreadLevel ThreadLevel
		{
			get
			{
				return this._ThreadLevel.Entity;
			}
			set
			{
				ThreadLevel previousValue = this._ThreadLevel.Entity;
				if (((previousValue != value) 
							|| (this._ThreadLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThreadLevel.Entity = null;
						previousValue.Threads.Remove(this);
					}
					this._ThreadLevel.Entity = value;
					if ((value != null))
					{
						value.Threads.Add(this);
						this._Level = value.Level;
					}
					else
					{
						this._Level = default(long);
					}
					this.SendPropertyChanged("ThreadLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
		
		private void attach_ThreadReads(ThreadRead entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_ThreadReads(ThreadRead entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
	}
	
	[Table(Name="security.AccessControlItems")]
	public partial class AccessControlItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AccessControlItemID;
		
		private long _AccessControlListID;
		
		private char _Type;
		
		private string _For;
		
		private bool _Allow;
		
		private int _Order;
		
		private EntityRef<AccessControlList> _AccessControlList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessControlItemIDChanging(long value);
    partial void OnAccessControlItemIDChanged();
    partial void OnAccessControlListIDChanging(long value);
    partial void OnAccessControlListIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnForChanging(string value);
    partial void OnForChanged();
    partial void OnAllowChanging(bool value);
    partial void OnAllowChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public AccessControlItem()
		{
			this._AccessControlList = default(EntityRef<AccessControlList>);
			OnCreated();
		}
		
		[Column(Storage="_AccessControlItemID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AccessControlItemID
		{
			get
			{
				return this._AccessControlItemID;
			}
			set
			{
				if ((this._AccessControlItemID != value))
				{
					this.OnAccessControlItemIDChanging(value);
					this.SendPropertyChanging();
					this._AccessControlItemID = value;
					this.SendPropertyChanged("AccessControlItemID");
					this.OnAccessControlItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessControlListID", DbType="BigInt NOT NULL")]
		public long AccessControlListID
		{
			get
			{
				return this._AccessControlListID;
			}
			set
			{
				if ((this._AccessControlListID != value))
				{
					if (this._AccessControlList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessControlListIDChanging(value);
					this.SendPropertyChanging();
					this._AccessControlListID = value;
					this.SendPropertyChanged("AccessControlListID");
					this.OnAccessControlListIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(1) NOT NULL")]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Name="[For]", Storage="_For", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string For
		{
			get
			{
				return this._For;
			}
			set
			{
				if ((this._For != value))
				{
					this.OnForChanging(value);
					this.SendPropertyChanging();
					this._For = value;
					this.SendPropertyChanged("For");
					this.OnForChanged();
				}
			}
		}
		
		[Column(Storage="_Allow", DbType="Bit NOT NULL")]
		public bool Allow
		{
			get
			{
				return this._Allow;
			}
			set
			{
				if ((this._Allow != value))
				{
					this.OnAllowChanging(value);
					this.SendPropertyChanging();
					this._Allow = value;
					this.SendPropertyChanged("Allow");
					this.OnAllowChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Association(Name="AccessControlList_AccessControlItem", Storage="_AccessControlList", ThisKey="AccessControlListID", OtherKey="AccessControlListID", IsForeignKey=true)]
		public AccessControlList AccessControlList
		{
			get
			{
				return this._AccessControlList.Entity;
			}
			set
			{
				AccessControlList previousValue = this._AccessControlList.Entity;
				if (((previousValue != value) 
							|| (this._AccessControlList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessControlList.Entity = null;
						previousValue.AccessControlItems.Remove(this);
					}
					this._AccessControlList.Entity = value;
					if ((value != null))
					{
						value.AccessControlItems.Add(this);
						this._AccessControlListID = value.AccessControlListID;
					}
					else
					{
						this._AccessControlListID = default(long);
					}
					this.SendPropertyChanged("AccessControlList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="security.AccessControlLists")]
	public partial class AccessControlList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AccessControlListID;
		
		private string _Name;
		
		private EntitySet<ForumGroupsAccess> _ForumGroupsAccesses;
		
		private EntitySet<ForumsAccess> _ForumsAccesses;
		
		private EntitySet<AccessControlItem> _AccessControlItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessControlListIDChanging(long value);
    partial void OnAccessControlListIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AccessControlList()
		{
			this._ForumGroupsAccesses = new EntitySet<ForumGroupsAccess>(new Action<ForumGroupsAccess>(this.attach_ForumGroupsAccesses), new Action<ForumGroupsAccess>(this.detach_ForumGroupsAccesses));
			this._ForumsAccesses = new EntitySet<ForumsAccess>(new Action<ForumsAccess>(this.attach_ForumsAccesses), new Action<ForumsAccess>(this.detach_ForumsAccesses));
			this._AccessControlItems = new EntitySet<AccessControlItem>(new Action<AccessControlItem>(this.attach_AccessControlItems), new Action<AccessControlItem>(this.detach_AccessControlItems));
			OnCreated();
		}
		
		[Column(Storage="_AccessControlListID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AccessControlListID
		{
			get
			{
				return this._AccessControlListID;
			}
			set
			{
				if ((this._AccessControlListID != value))
				{
					this.OnAccessControlListIDChanging(value);
					this.SendPropertyChanging();
					this._AccessControlListID = value;
					this.SendPropertyChanged("AccessControlListID");
					this.OnAccessControlListIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="AccessControlList_ForumGroupsAccess", Storage="_ForumGroupsAccesses", ThisKey="AccessControlListID", OtherKey="AccessControlListID")]
		public EntitySet<ForumGroupsAccess> ForumGroupsAccesses
		{
			get
			{
				return this._ForumGroupsAccesses;
			}
			set
			{
				this._ForumGroupsAccesses.Assign(value);
			}
		}
		
		[Association(Name="AccessControlList_ForumsAccess", Storage="_ForumsAccesses", ThisKey="AccessControlListID", OtherKey="AccessControlListID")]
		public EntitySet<ForumsAccess> ForumsAccesses
		{
			get
			{
				return this._ForumsAccesses;
			}
			set
			{
				this._ForumsAccesses.Assign(value);
			}
		}
		
		[Association(Name="AccessControlList_AccessControlItem", Storage="_AccessControlItems", ThisKey="AccessControlListID", OtherKey="AccessControlListID")]
		public EntitySet<AccessControlItem> AccessControlItems
		{
			get
			{
				return this._AccessControlItems;
			}
			set
			{
				this._AccessControlItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumGroupsAccesses(ForumGroupsAccess entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = this;
		}
		
		private void detach_ForumGroupsAccesses(ForumGroupsAccess entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = null;
		}
		
		private void attach_ForumsAccesses(ForumsAccess entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = this;
		}
		
		private void detach_ForumsAccesses(ForumsAccess entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = null;
		}
		
		private void attach_AccessControlItems(AccessControlItem entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = this;
		}
		
		private void detach_AccessControlItems(AccessControlItem entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = null;
		}
	}
	
	[Table(Name="security.AuthFailures")]
	public partial class AuthFailure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private string _OriginatingHostIP;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnOriginatingHostIPChanging(string value);
    partial void OnOriginatingHostIPChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public AuthFailure()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_OriginatingHostIP", DbType="NVarChar(39) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OriginatingHostIP
		{
			get
			{
				return this._OriginatingHostIP;
			}
			set
			{
				if ((this._OriginatingHostIP != value))
				{
					this.OnOriginatingHostIPChanging(value);
					this.SendPropertyChanging();
					this._OriginatingHostIP = value;
					this.SendPropertyChanged("OriginatingHostIP");
					this.OnOriginatingHostIPChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Association(Name="User_AuthFailure", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AuthFailures.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AuthFailures.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="security.AutoLogin")]
	public partial class AutoLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Key;
		
		private long _UserID;
		
		private System.DateTime _ExpirationDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(System.Guid value);
    partial void OnKeyChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    #endregion
		
		public AutoLogin()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExpirationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[Association(Name="User_AutoLogin", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AutoLogins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AutoLogins.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="security.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RoleID;
		
		private string _Name;
		
		private bool _IsDefault;
		
		private bool _IsAdministrator;
		
		private EntitySet<UsersRole> _UsersRoles;
		
		private EntitySet<Title> _Titles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(long value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnIsAdministratorChanging(bool value);
    partial void OnIsAdministratorChanged();
    #endregion
		
		public Role()
		{
			this._UsersRoles = new EntitySet<UsersRole>(new Action<UsersRole>(this.attach_UsersRoles), new Action<UsersRole>(this.detach_UsersRoles));
			this._Titles = new EntitySet<Title>(new Action<Title>(this.attach_Titles), new Action<Title>(this.detach_Titles));
			OnCreated();
		}
		
		[Column(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_IsAdministrator", DbType="Bit NOT NULL")]
		public bool IsAdministrator
		{
			get
			{
				return this._IsAdministrator;
			}
			set
			{
				if ((this._IsAdministrator != value))
				{
					this.OnIsAdministratorChanging(value);
					this.SendPropertyChanging();
					this._IsAdministrator = value;
					this.SendPropertyChanged("IsAdministrator");
					this.OnIsAdministratorChanged();
				}
			}
		}
		
		[Association(Name="Role_UsersRole", Storage="_UsersRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UsersRole> UsersRoles
		{
			get
			{
				return this._UsersRoles;
			}
			set
			{
				this._UsersRoles.Assign(value);
			}
		}
		
		[Association(Name="Role_Title", Storage="_Titles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<Title> Titles
		{
			get
			{
				return this._Titles;
			}
			set
			{
				this._Titles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_Titles(Title entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Titles(Title entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="security.SecurityKeys")]
	public partial class SecurityKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private System.Guid _Key;
		
		private System.DateTime _ExpirationDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnKeyChanging(System.Guid value);
    partial void OnKeyChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    #endregion
		
		public SecurityKey()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_ExpirationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[Association(Name="User_SecurityKey", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SecurityKey = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SecurityKey = this;
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="events.Prizes")]
	public partial class Prize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PrizeId;
		
		private long _EventId;
		
		private string _Name;
		
		private System.Nullable<long> _WinnerUserId;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrizeIdChanging(long value);
    partial void OnPrizeIdChanged();
    partial void OnEventIdChanging(long value);
    partial void OnEventIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWinnerUserIdChanging(System.Nullable<long> value);
    partial void OnWinnerUserIdChanged();
    #endregion
		
		public Prize()
		{
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PrizeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PrizeId
		{
			get
			{
				return this._PrizeId;
			}
			set
			{
				if ((this._PrizeId != value))
				{
					this.OnPrizeIdChanging(value);
					this.SendPropertyChanging();
					this._PrizeId = value;
					this.SendPropertyChanged("PrizeId");
					this.OnPrizeIdChanged();
				}
			}
		}
		
		[Column(Storage="_EventId", DbType="BigInt NOT NULL")]
		public long EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_WinnerUserId", DbType="BigInt")]
		public System.Nullable<long> WinnerUserId
		{
			get
			{
				return this._WinnerUserId;
			}
			set
			{
				if ((this._WinnerUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWinnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._WinnerUserId = value;
					this.SendPropertyChanged("WinnerUserId");
					this.OnWinnerUserIdChanged();
				}
			}
		}
		
		[Association(Name="Event_Prize", Storage="_Event", ThisKey="EventId", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Prizes.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Prizes.Add(this);
						this._EventId = value.EventID;
					}
					else
					{
						this._EventId = default(long);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="User_Prize", Storage="_User", ThisKey="WinnerUserId", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Prizes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Prizes.Add(this);
						this._WinnerUserId = value.UserID;
					}
					else
					{
						this._WinnerUserId = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Polls")]
	public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PollId;
		
		private long _CreatorUserId;
		
		private string _Title;
		
		private bool _IsPrivate;
		
		private bool _IsMultiAnswer;
		
		private string _Text;
		
		private EntitySet<PollResponse> _PollResponses;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPollIdChanging(long value);
    partial void OnPollIdChanged();
    partial void OnCreatorUserIdChanging(long value);
    partial void OnCreatorUserIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsPrivateChanging(bool value);
    partial void OnIsPrivateChanged();
    partial void OnIsMultiAnswerChanging(bool value);
    partial void OnIsMultiAnswerChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Poll()
		{
			this._PollResponses = new EntitySet<PollResponse>(new Action<PollResponse>(this.attach_PollResponses), new Action<PollResponse>(this.detach_PollResponses));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PollId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PollId
		{
			get
			{
				return this._PollId;
			}
			set
			{
				if ((this._PollId != value))
				{
					this.OnPollIdChanging(value);
					this.SendPropertyChanging();
					this._PollId = value;
					this.SendPropertyChanged("PollId");
					this.OnPollIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorUserId", DbType="BigInt NOT NULL")]
		public long CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsPrivate", DbType="Bit NOT NULL")]
		public bool IsPrivate
		{
			get
			{
				return this._IsPrivate;
			}
			set
			{
				if ((this._IsPrivate != value))
				{
					this.OnIsPrivateChanging(value);
					this.SendPropertyChanging();
					this._IsPrivate = value;
					this.SendPropertyChanged("IsPrivate");
					this.OnIsPrivateChanged();
				}
			}
		}
		
		[Column(Storage="_IsMultiAnswer", DbType="Bit NOT NULL")]
		public bool IsMultiAnswer
		{
			get
			{
				return this._IsMultiAnswer;
			}
			set
			{
				if ((this._IsMultiAnswer != value))
				{
					this.OnIsMultiAnswerChanging(value);
					this.SendPropertyChanging();
					this._IsMultiAnswer = value;
					this.SendPropertyChanged("IsMultiAnswer");
					this.OnIsMultiAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="Poll_PollResponse", Storage="_PollResponses", ThisKey="PollId", OtherKey="PollId")]
		public EntitySet<PollResponse> PollResponses
		{
			get
			{
				return this._PollResponses;
			}
			set
			{
				this._PollResponses.Assign(value);
			}
		}
		
		[Association(Name="User_Poll", Storage="_User", ThisKey="CreatorUserId", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Polls.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Polls.Add(this);
						this._CreatorUserId = value.UserID;
					}
					else
					{
						this._CreatorUserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PollResponses(PollResponse entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_PollResponses(PollResponse entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
	}
	
	[Table(Name="dbo.PollResponses")]
	public partial class PollResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PollResponseId;
		
		private long _PollId;
		
		private string _Label;
		
		private EntitySet<UsersPollResponse> _UsersPollResponses;
		
		private EntityRef<Poll> _Poll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPollResponseIdChanging(long value);
    partial void OnPollResponseIdChanged();
    partial void OnPollIdChanging(long value);
    partial void OnPollIdChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
		
		public PollResponse()
		{
			this._UsersPollResponses = new EntitySet<UsersPollResponse>(new Action<UsersPollResponse>(this.attach_UsersPollResponses), new Action<UsersPollResponse>(this.detach_UsersPollResponses));
			this._Poll = default(EntityRef<Poll>);
			OnCreated();
		}
		
		[Column(Storage="_PollResponseId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PollResponseId
		{
			get
			{
				return this._PollResponseId;
			}
			set
			{
				if ((this._PollResponseId != value))
				{
					this.OnPollResponseIdChanging(value);
					this.SendPropertyChanging();
					this._PollResponseId = value;
					this.SendPropertyChanged("PollResponseId");
					this.OnPollResponseIdChanged();
				}
			}
		}
		
		[Column(Storage="_PollId", DbType="BigInt NOT NULL")]
		public long PollId
		{
			get
			{
				return this._PollId;
			}
			set
			{
				if ((this._PollId != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollIdChanging(value);
					this.SendPropertyChanging();
					this._PollId = value;
					this.SendPropertyChanged("PollId");
					this.OnPollIdChanged();
				}
			}
		}
		
		[Column(Storage="_Label", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[Association(Name="PollResponse_UsersPollResponse", Storage="_UsersPollResponses", ThisKey="PollResponseId", OtherKey="PollResponseId")]
		public EntitySet<UsersPollResponse> UsersPollResponses
		{
			get
			{
				return this._UsersPollResponses;
			}
			set
			{
				this._UsersPollResponses.Assign(value);
			}
		}
		
		[Association(Name="Poll_PollResponse", Storage="_Poll", ThisKey="PollId", OtherKey="PollId", IsForeignKey=true)]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.PollResponses.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.PollResponses.Add(this);
						this._PollId = value.PollId;
					}
					else
					{
						this._PollId = default(long);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersPollResponses(UsersPollResponse entity)
		{
			this.SendPropertyChanging();
			entity.PollResponse = this;
		}
		
		private void detach_UsersPollResponses(UsersPollResponse entity)
		{
			this.SendPropertyChanging();
			entity.PollResponse = null;
		}
	}
	
	[Table(Name="dbo.UsersPollResponses")]
	public partial class UsersPollResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserPollResponseId;
		
		private long _UserId;
		
		private long _PollResponseId;
		
		private bool _IsSelected;
		
		private EntityRef<PollResponse> _PollResponse;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserPollResponseIdChanging(long value);
    partial void OnUserPollResponseIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnPollResponseIdChanging(long value);
    partial void OnPollResponseIdChanged();
    partial void OnIsSelectedChanging(bool value);
    partial void OnIsSelectedChanged();
    #endregion
		
		public UsersPollResponse()
		{
			this._PollResponse = default(EntityRef<PollResponse>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserPollResponseId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserPollResponseId
		{
			get
			{
				return this._UserPollResponseId;
			}
			set
			{
				if ((this._UserPollResponseId != value))
				{
					this.OnUserPollResponseIdChanging(value);
					this.SendPropertyChanging();
					this._UserPollResponseId = value;
					this.SendPropertyChanged("UserPollResponseId");
					this.OnUserPollResponseIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PollResponseId", DbType="BigInt NOT NULL")]
		public long PollResponseId
		{
			get
			{
				return this._PollResponseId;
			}
			set
			{
				if ((this._PollResponseId != value))
				{
					if (this._PollResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollResponseIdChanging(value);
					this.SendPropertyChanging();
					this._PollResponseId = value;
					this.SendPropertyChanged("PollResponseId");
					this.OnPollResponseIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsSelected", DbType="Bit NOT NULL")]
		public bool IsSelected
		{
			get
			{
				return this._IsSelected;
			}
			set
			{
				if ((this._IsSelected != value))
				{
					this.OnIsSelectedChanging(value);
					this.SendPropertyChanging();
					this._IsSelected = value;
					this.SendPropertyChanged("IsSelected");
					this.OnIsSelectedChanged();
				}
			}
		}
		
		[Association(Name="PollResponse_UsersPollResponse", Storage="_PollResponse", ThisKey="PollResponseId", OtherKey="PollResponseId", IsForeignKey=true)]
		public PollResponse PollResponse
		{
			get
			{
				return this._PollResponse.Entity;
			}
			set
			{
				PollResponse previousValue = this._PollResponse.Entity;
				if (((previousValue != value) 
							|| (this._PollResponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PollResponse.Entity = null;
						previousValue.UsersPollResponses.Remove(this);
					}
					this._PollResponse.Entity = value;
					if ((value != null))
					{
						value.UsersPollResponses.Add(this);
						this._PollResponseId = value.PollResponseId;
					}
					else
					{
						this._PollResponseId = default(long);
					}
					this.SendPropertyChanged("PollResponse");
				}
			}
		}
		
		[Association(Name="User_UsersPollResponse", Storage="_User", ThisKey="UserId", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersPollResponses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersPollResponses.Add(this);
						this._UserId = value.UserID;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="events.EventImagesUserTags")]
	public partial class EventImageUserTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventImageUserTagId;
		
		private long _EventImageId;
		
		private long _TaggedUserUserId;
		
		private long _CreatorUserId;
		
		private System.Data.Linq.Binary _Region;
		
		private EntityRef<User> _Creator;
		
		private EntityRef<EventImage> _EventImage;
		
		private EntityRef<User> _TaggedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventImageUserTagIdChanging(long value);
    partial void OnEventImageUserTagIdChanged();
    partial void OnEventImageIdChanging(long value);
    partial void OnEventImageIdChanged();
    partial void OnTaggedUserUserIdChanging(long value);
    partial void OnTaggedUserUserIdChanged();
    partial void OnCreatorUserIdChanging(long value);
    partial void OnCreatorUserIdChanged();
    partial void OnRegionChanging(System.Data.Linq.Binary value);
    partial void OnRegionChanged();
    #endregion
		
		public EventImageUserTag()
		{
			this._Creator = default(EntityRef<User>);
			this._EventImage = default(EntityRef<EventImage>);
			this._TaggedUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EventImageUserTagId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EventImageUserTagId
		{
			get
			{
				return this._EventImageUserTagId;
			}
			set
			{
				if ((this._EventImageUserTagId != value))
				{
					this.OnEventImageUserTagIdChanging(value);
					this.SendPropertyChanging();
					this._EventImageUserTagId = value;
					this.SendPropertyChanged("EventImageUserTagId");
					this.OnEventImageUserTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_EventImageId", DbType="BigInt NOT NULL")]
		public long EventImageId
		{
			get
			{
				return this._EventImageId;
			}
			set
			{
				if ((this._EventImageId != value))
				{
					if (this._EventImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventImageIdChanging(value);
					this.SendPropertyChanging();
					this._EventImageId = value;
					this.SendPropertyChanged("EventImageId");
					this.OnEventImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_TaggedUserUserId", DbType="BigInt NOT NULL")]
		public long TaggedUserUserId
		{
			get
			{
				return this._TaggedUserUserId;
			}
			set
			{
				if ((this._TaggedUserUserId != value))
				{
					if (this._TaggedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaggedUserUserIdChanging(value);
					this.SendPropertyChanging();
					this._TaggedUserUserId = value;
					this.SendPropertyChanged("TaggedUserUserId");
					this.OnTaggedUserUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorUserId", DbType="BigInt NOT NULL")]
		public long CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					if (this._Creator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Region", DbType="VarBinary(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[Association(Name="User_EventImageUserTag", Storage="_Creator", ThisKey="CreatorUserId", OtherKey="UserID", IsForeignKey=true)]
		public User Creator
		{
			get
			{
				return this._Creator.Entity;
			}
			set
			{
				if ((this._Creator.Entity != value))
				{
					this.SendPropertyChanging();
					this._Creator.Entity = value;
					this.SendPropertyChanged("Creator");
				}
			}
		}
		
		[Association(Name="EventImage_EventImageUserTag", Storage="_EventImage", ThisKey="EventImageId", OtherKey="EventImageID", IsForeignKey=true)]
		public EventImage EventImage
		{
			get
			{
				return this._EventImage.Entity;
			}
			set
			{
				EventImage previousValue = this._EventImage.Entity;
				if (((previousValue != value) 
							|| (this._EventImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventImage.Entity = null;
						previousValue.UserTags.Remove(this);
					}
					this._EventImage.Entity = value;
					if ((value != null))
					{
						value.UserTags.Add(this);
						this._EventImageId = value.EventImageID;
					}
					else
					{
						this._EventImageId = default(long);
					}
					this.SendPropertyChanged("EventImage");
				}
			}
		}
		
		[Association(Name="User_EventImageUserTag1", Storage="_TaggedUser", ThisKey="TaggedUserUserId", OtherKey="UserID", IsForeignKey=true)]
		public User TaggedUser
		{
			get
			{
				return this._TaggedUser.Entity;
			}
			set
			{
				User previousValue = this._TaggedUser.Entity;
				if (((previousValue != value) 
							|| (this._TaggedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaggedUser.Entity = null;
						previousValue.ImageTagsOf.Remove(this);
					}
					this._TaggedUser.Entity = value;
					if ((value != null))
					{
						value.ImageTagsOf.Add(this);
						this._TaggedUserUserId = value.UserID;
					}
					else
					{
						this._TaggedUserUserId = default(long);
					}
					this.SendPropertyChanged("TaggedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
